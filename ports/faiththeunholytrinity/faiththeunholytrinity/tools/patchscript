#!/bin/bash
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patch_error.txt"

# Redirect output and error to the log file
rm -rf $LOGFILE $LOGERR
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# Exports
export DATADIR="$GAMEDIR/assets"
export DATAFILE="$GAME_NAME.port"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export TOOLDIR="$GAMEDIR/tools"
export TMPDIR="$GAMEDIR/tmp"
export PATH="$GAMEDIR/tools:$PATH"

# Permissions
chmod 666 /dev/uinput
chmod 777 "$TOOLDIR/gmKtool.py"
chmod 777 "$TOOLDIR/oggenc"
chmod 777 "$TOOLDIR/oggdec"

cd "$GAMEDIR"

#
# @brief
# Patch data.win and generate game.droid
#
# @details
# Verify the patch file exists and the data.win exists.
#
# @notes
# Patch file compresses textures. Steam patch also
# wrap all Steam api calls in a check for if Steam has been initialized.
# This prevent segfaults from when Airdorf attempts to unlock achievements based
# on undefined values form the API calls. GOG version has similiar code so I
# guess the api call return defined values, unlike steam.
# If not steam or gog. Should still work without the compressed textures
# but ram usage gets really close to 1GB, causing occasional crashes
#
apply_xdelta() {
    # Check if the data.win file exists and apply xdelta
    VERSION=""
    if [ -f "$DATADIR/data.win" ]; then
        # Check which version
        if [ "$(md5sum "$DATADIR/data.win" | awk '{print $1}')" == "4cc5cb4516a82420f883abe41168b679" ]; then
            echo "Steam version found"
            VERSION="steam"
        elif [ "$(md5sum "$DATADIR/data.win" | awk '{print $1}')" == "4a4819f61b5686efcfef1761b362112e" ]; then
            echo "GOG version found"
            VERSION="gog"
        fi
        # Check if a patchfile exists for that version
        if [ -f "./tools/patches/$VERSION/$GAME_NAME.xdelta" ]; then
            output=$(xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patches/$VERSION/$GAME_NAME.xdelta" "$DATADIR/game.droid" 2>&1)
            if [ $? -eq 0 ]; then
                echo "Patch applied successfully"
                echo "$output"
                rm "$DATADIR/data.win"
            else
                echo "Failed to apply patch"
                echo "$output"
                mv $LOGFILE $LOGERR
                exit 1
            fi
        else
            echo "No patch file found"
            mv "$DATADIR/data.win" "$DATADIR/game.droid"
        fi
    else
        echo "No data.win file found to patch!"
    fi
}

#
# @brief
# Compress Audio Files
# 
# @details
# Compress audio files to reduce ram usage.
#
# @notes
# On startup FAITH loads audiogroup18.dat ("loading Hymns") into ram.
# This causes a segfault unless compressed. audiogroup18.dat i think is 
# all the background music.
#
compress_audio() {
    # Minimum size of WAV/OGG files to be compressed, in bytes.
    MINSIZE=0 # 0 will compress all files

    # Bite Rate to encode audio files at, in kbps.
    BITRATE=0 # 0 will set to auto, lowering the bitrates seems complete destroy the audio files (all go to 0 mb) so this isn't an option to save RAM for faith

    # Rate to sample audio files at, in Hz.
    RESAMPLERATE=8000 # lowest support sampling rate, seems to be the only/best way to get compressed audio for faith

    mkdir -p "$TMPDIR"

    # Run the compression tool
    PYTHON=$(which python3)
    echo "Running GMTools on data and audiogroups."
    $PYTHON ./tools/gmKtool.py -vvv  -m $MINSIZE -b $BITRATE -R $RESAMPLERATE -r -D -d "$TMPDIR" "$DATADIR/game.droid"

    if [ $? -eq 0 ]; then
        echo "Compression completed successfully."
        mv "$TMPDIR/"* "$DATADIR"
        echo "Moved compressed files to $DATADIR."
        rm -rf "$TMPDIR"
        echo "Temporary directory $TMPDIR removed."
        echo "Audio compression applied successfully."
    else
        echo "Audio compression failed."
        echo "Cleaning up temporary directory $TMPDIR."
        rm -rf "$TMPDIR"
    fi
}

#
# @brief
# Zip game assests into .port file
# 
# @details
#
zip_archive() {
        zip -r -0 $DATAFILE ./assets/
        mkdir -p saves
        rm -rf assets
}

#
# @brief
# Process the game
# 
# @details
# main loop
#
process_game() {
    echo "Removing unnecessary files and folders"
    rm -rf $DATADIR/*.exe $DATADIR/*.dll $DATADIR/.gitkeep $DATADIR/gamedat $DATADIR/goodies $DATADIR/*.ico $DATADIR/*.hashdb $DATADIR/*.info $DATADIR/*.msg $DATADIR/__redist 
    sleep 1
    echo "Applying xdelta patch"
    apply_xdelta
    sleep 1
    echo "Compressing audio..."
    compress_audio
    sleep 1
    echo "Finishing up..."
    zip_archive
    sleep 1

    # Final completion message
    echo "Patching process complete!"
}

# Call the function
process_game
